<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on 风间小筑</title><link>https://fjcanyue.github.io/tags/programming/</link><description>Recent content in Programming on 风间小筑</description><generator>Hugo</generator><language>zh-Hans</language><copyright>Copy, _right?_ :thinking_face:</copyright><lastBuildDate>Fri, 14 Mar 2025 10:59:23 +0000</lastBuildDate><atom:link href="https://fjcanyue.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>可视化编程的困境：为何止步于表单？</title><link>https://fjcanyue.github.io/posts/%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BC%96%E7%A8%8B%E7%9A%84%E5%9B%B0%E5%A2%83%E4%B8%BA%E4%BD%95%E6%AD%A2%E6%AD%A5%E4%BA%8E%E8%A1%A8%E5%8D%95/</link><pubDate>Fri, 14 Mar 2025 10:59:23 +0000</pubDate><guid>https://fjcanyue.github.io/posts/%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BC%96%E7%A8%8B%E7%9A%84%E5%9B%B0%E5%A2%83%E4%B8%BA%E4%BD%95%E6%AD%A2%E6%AD%A5%E4%BA%8E%E8%A1%A8%E5%8D%95/</guid><description>&lt;p>可视化编程曾被誉为编程的未来，承诺让编程变得更加直观、易学且高效。然而，几十年过去了，可视化编程工具仍然主要停留在表单层面，未能真正取代文本编程。本文将探讨这一现象背后的原因，分析可视化编程的历史、局限性以及未来可能的发展方向。&lt;/p>
&lt;p>尽管可视化编程在某些领域取得了成功，如游戏开发（Unity、Unreal）、数据分析（Tableau）和自动化工作流（Zapier、IFTTT），但它在通用编程领域的应用仍然有限。为什么可视化编程工具无法超越表单界面的限制？为什么程序员仍然偏爱文本编辑器和IDE？这些问题值得我们深入思考。&lt;/p></description></item></channel></rss>